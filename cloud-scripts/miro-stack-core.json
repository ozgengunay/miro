{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "Miro Stack Core",
  "Parameters": {
    "ami": {
      "Description": "ami",
      "Type": "String"
    },
    "bastionInstanceType": {
      "Description": "bastionInstanceType",
      "Type": "String"
    },
    "keyPair": {
      "Description": "Name of an existing EC2 key pair for SSH access to the EC2 instances",
      "Type": "AWS::EC2::KeyPair::KeyName"
    }
  },
  "Resources": {
    "vpc": {
      "Type": "AWS::EC2::VPC",
      "Properties": {
        "CidrBlock": "10.0.0.0/16",
        "InstanceTenancy": "default",
        "EnableDnsSupport": "true",
        "EnableDnsHostnames": "false"
      }
    },
    "securityGroupPublic": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupName": "securityGroupPublic",
        "GroupDescription": "Public SG",
        "VpcId": {
          "Ref": "vpc"
        },
        "SecurityGroupIngress": [
          {
            "IpProtocol": "tcp",
            "FromPort": "80",
            "ToPort": "80",
            "CidrIp": "0.0.0.0/0"
          },
          {
            "IpProtocol": "tcp",
            "FromPort": "443",
            "ToPort": "443",
            "CidrIp": "0.0.0.0/0"
          }
        ]
      }
    },
    "securityGroupBastion": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupName": "securityGroupBastion",
        "GroupDescription": "Bastion SG",
        "VpcId": {
          "Ref": "vpc"
        },
        "SecurityGroupIngress": [
          {
            "IpProtocol": "tcp",
            "FromPort": "22",
            "ToPort": "22",
            "CidrIp": "0.0.0.0/0"
          }
        ]
      }
    },
    "securityGroupPrivate": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupName": "securityGroupPrivate",
        "GroupDescription": "Private SG",
        "VpcId": {
          "Ref": "vpc"
        },
        "SecurityGroupIngress": [
          {
            "IpProtocol": "tcp",
            "FromPort": "8080",
            "ToPort": "8080",
            "SourceSecurityGroupId": {
              "Ref": "securityGroupPublic"
            }
          },
          {
            "IpProtocol": "tcp",
            "FromPort": "8443",
            "ToPort": "8443",
            "SourceSecurityGroupId": {
              "Ref": "securityGroupPublic"
            }
          },
          {
            "IpProtocol": "tcp",
            "FromPort": "22",
            "ToPort": "22",
            "SourceSecurityGroupId": {
              "Ref": "securityGroupBastion"
            }
          }
        ]
      }
    },
    "internetGateway": {
      "Type": "AWS::EC2::InternetGateway",
      "Properties": {
        
      }
    },
    "vpcGatewayAttachment": {
      "Type": "AWS::EC2::VPCGatewayAttachment",
      "Properties": {
        "VpcId": {
          "Ref": "vpc"
        },
        "InternetGatewayId": {
          "Ref": "internetGateway"
        }
      }
    },
    "publicSubnet1": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "AvailabilityZone": {
          "Fn::Join": [
            "",
            [
              {
                "Ref": "AWS::Region"
              },
              "a"
            ]
          ]
        },
        "MapPublicIpOnLaunch": "true",
        "CidrBlock": "10.0.1.0/24",
        "VpcId": {
          "Ref": "vpc"
        }
      }
    },
    "publicSubnet2": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "AvailabilityZone": {
          "Fn::Join": [
            "",
            [
              {
                "Ref": "AWS::Region"
              },
              "b"
            ]
          ]
        },
        "MapPublicIpOnLaunch": "true",
        "CidrBlock": "10.0.2.0/24",
        "VpcId": {
          "Ref": "vpc"
        }
      }
    },
    "privateSubnet1": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "AvailabilityZone": {
          "Fn::Join": [
            "",
            [
              {
                "Ref": "AWS::Region"
              },
              "a"
            ]
          ]
        },
        "CidrBlock": "10.0.10.0/24",
        "VpcId": {
          "Ref": "vpc"
        }
      }
    },
    "privateSubnet2": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "AvailabilityZone": {
          "Fn::Join": [
            "",
            [
              {
                "Ref": "AWS::Region"
              },
              "b"
            ]
          ]
        },
        "CidrBlock": "10.0.11.0/24",
        "VpcId": {
          "Ref": "vpc"
        }
      }
    },
    "networkACLPublic": {
      "Type": "AWS::EC2::NetworkAcl",
      "Properties": {
        "VpcId": {
          "Ref": "vpc"
        }
      }
    },
    "networkACLPrivate": {
      "Type": "AWS::EC2::NetworkAcl",
      "Properties": {
        "VpcId": {
          "Ref": "vpc"
        }
      }
    },
    "networkAclEntryPublic1": {
      "Type": "AWS::EC2::NetworkAclEntry",
      "Properties": {
        "CidrBlock": "0.0.0.0/0",
        "Egress": "true",
        "Protocol": "6",
        "RuleAction": "allow",
        "RuleNumber": "100",
        "PortRange": {
          "From": "80",
          "To": "80"
        },
        "NetworkAclId": {
          "Ref": "networkACLPublic"
        }
      }
    },
    "networkAclEntryPublic2": {
      "Type": "AWS::EC2::NetworkAclEntry",
      "Properties": {
        "CidrBlock": "0.0.0.0/0",
        "Protocol": "6",
        "RuleAction": "allow",
        "RuleNumber": "100",
        "PortRange": {
          "From": "80",
          "To": "80"
        },
        "NetworkAclId": {
          "Ref": "networkACLPublic"
        }
      }
    },
    "networkAclEntryPublic3": {
      "Type": "AWS::EC2::NetworkAclEntry",
      "Properties": {
        "CidrBlock": "0.0.0.0/0",
        "Egress": "true",
        "Protocol": "6",
        "RuleAction": "allow",
        "RuleNumber": "200",
        "PortRange": {
          "From": "443",
          "To": "443"
        },
        "NetworkAclId": {
          "Ref": "networkACLPublic"
        }
      }
    },
    "networkAclEntryPublic4": {
      "Type": "AWS::EC2::NetworkAclEntry",
      "Properties": {
        "CidrBlock": "0.0.0.0/0",
        "Protocol": "6",
        "RuleAction": "allow",
        "RuleNumber": "200",
        "PortRange": {
          "From": "443",
          "To": "443"
        },
        "NetworkAclId": {
          "Ref": "networkACLPublic"
        }
      }
    },
    "networkAclEntryPublic5": {
      "Type": "AWS::EC2::NetworkAclEntry",
      "Properties": {
        "CidrBlock": "0.0.0.0/0",
        "Egress": "true",
        "Protocol": "6",
        "RuleAction": "allow",
        "RuleNumber": "300",
        "PortRange": {
          "From": "22",
          "To": "22"
        },
        "NetworkAclId": {
          "Ref": "networkACLPublic"
        }
      }
    },
    "networkAclEntryPublic6": {
      "Type": "AWS::EC2::NetworkAclEntry",
      "Properties": {
        "CidrBlock": "0.0.0.0/0",
        "Protocol": "6",
        "RuleAction": "allow",
        "RuleNumber": "300",
        "PortRange": {
          "From": "22",
          "To": "22"
        },
        "NetworkAclId": {
          "Ref": "networkACLPublic"
        }
      }
    },
    "networkAclEntryPublic7": {
      "Type": "AWS::EC2::NetworkAclEntry",
      "Properties": {
        "CidrBlock": "0.0.0.0/0",
        "Egress": "true",
        "Protocol": "6",
        "RuleAction": "allow",
        "RuleNumber": "400",
        "PortRange": {
          "From": "1024",
          "To": "65535"
        },
        "NetworkAclId": {
          "Ref": "networkACLPublic"
        }
      }
    },
    "networkAclEntryPublic8": {
      "Type": "AWS::EC2::NetworkAclEntry",
      "Properties": {
        "CidrBlock": "0.0.0.0/0",
        "Protocol": "6",
        "RuleAction": "allow",
        "RuleNumber": "400",
        "PortRange": {
          "From": "1024",
          "To": "65535"
        },
        "NetworkAclId": {
          "Ref": "networkACLPublic"
        }
      }
    },
    "networkAclEntryPrivate1": {
      "Type": "AWS::EC2::NetworkAclEntry",
      "Properties": {
        "CidrBlock": "0.0.0.0/0",
        "Egress": "true",
        "Protocol": "-1",
        "RuleAction": "allow",
        "RuleNumber": "100",
        "NetworkAclId": {
          "Ref": "networkACLPrivate"
        }
      }
    },
    "networkAclEntryPrivate2": {
      "Type": "AWS::EC2::NetworkAclEntry",
      "Properties": {
        "CidrBlock": "0.0.0.0/0",
        "Protocol": "-1",
        "RuleAction": "allow",
        "RuleNumber": "100",
        "NetworkAclId": {
          "Ref": "networkACLPrivate"
        }
      }
    },
    "subnetNetworkAclAssociationPublic1": {
      "Type": "AWS::EC2::SubnetNetworkAclAssociation",
      "Properties": {
        "NetworkAclId": {
          "Ref": "networkACLPublic"
        },
        "SubnetId": {
          "Ref": "publicSubnet1"
        }
      }
    },
    "subnetNetworkAclAssociationPublic2": {
      "Type": "AWS::EC2::SubnetNetworkAclAssociation",
      "Properties": {
        "NetworkAclId": {
          "Ref": "networkACLPublic"
        },
        "SubnetId": {
          "Ref": "publicSubnet2"
        }
      }
    },
    "subnetNetworkAclAssociationPrivate1": {
      "Type": "AWS::EC2::SubnetNetworkAclAssociation",
      "Properties": {
        "NetworkAclId": {
          "Ref": "networkACLPrivate"
        },
        "SubnetId": {
          "Ref": "privateSubnet1"
        }
      }
    },
    "subnetNetworkAclAssociationPrivate2": {
      "Type": "AWS::EC2::SubnetNetworkAclAssociation",
      "Properties": {
        "NetworkAclId": {
          "Ref": "networkACLPrivate"
        },
        "SubnetId": {
          "Ref": "privateSubnet2"
        }
      }
    },
    "routeTablePrivate": {
      "Type": "AWS::EC2::RouteTable",
      "Properties": {
        "VpcId": {
          "Ref": "vpc"
        }
      }
    },
    "routeTablePublic": {
      "Type": "AWS::EC2::RouteTable",
      "Properties": {
        "VpcId": {
          "Ref": "vpc"
        }
      }
    },
    "subnetRouteTableAssociationPrivate1": {
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Properties": {
        "RouteTableId": {
          "Ref": "routeTablePrivate"
        },
        "SubnetId": {
          "Ref": "privateSubnet1"
        }
      }
    },
    "subnetRouteTableAssociationPrivate2": {
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Properties": {
        "RouteTableId": {
          "Ref": "routeTablePrivate"
        },
        "SubnetId": {
          "Ref": "privateSubnet2"
        }
      }
    },
    "subnetRouteTableAssociationPublic1": {
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Properties": {
        "RouteTableId": {
          "Ref": "routeTablePublic"
        },
        "SubnetId": {
          "Ref": "publicSubnet1"
        }
      }
    },
    "subnetRouteTableAssociationPublic2": {
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Properties": {
        "RouteTableId": {
          "Ref": "routeTablePublic"
        },
        "SubnetId": {
          "Ref": "publicSubnet2"
        }
      }
    },
    "routeToInternetGateway1": {
      "Type": "AWS::EC2::Route",
      "Properties": {
        "DestinationCidrBlock": "0.0.0.0/0",
        "RouteTableId": {
          "Ref": "routeTablePublic"
        },
        "GatewayId": {
          "Ref": "internetGateway"
        }
      }
    },
    "eipNatGateway": {
      "Type": "AWS::EC2::EIP",
      "Properties": {
        "Domain": "vpc"
      },
      "DependsOn": "vpc"
    },
    "natGateway": {
      "Type": "AWS::EC2::NatGateway",
      "Properties": {
        "AllocationId": {
          "Fn::GetAtt": [
            "eipNatGateway",
            "AllocationId"
          ]
        },
        "SubnetId": {
          "Ref": "publicSubnet1"
        }
      }
    },
    "routeToNatGateway": {
      "Type": "AWS::EC2::Route",
      "Properties": {
        "RouteTableId": {
          "Ref": "routeTablePrivate"
        },
        "DestinationCidrBlock": "0.0.0.0/0",
        "NatGatewayId": {
          "Ref": "natGateway"
        }
      }
    },
    "bastionHost1": {
      "Type": "AWS::EC2::Instance",
      "Properties": {
        "InstanceType": {
          "Ref": "bastionInstanceType"
        },
        "KeyName": {
          "Ref": "keyPair"
        },
        "ImageId": {
          "Ref": "ami"
        },
        "SubnetId": {
          "Ref": "publicSubnet1"
        },
        "SecurityGroupIds": [
          {
            "Ref": "securityGroupBastion"
          }
        ]
      }
    }
  },
  "Outputs": {
    "bastionIP": {
      "Value": {
        "Fn::GetAtt": [
          "bastionHost1",
          "PublicIp"
        ]
      }
    },
    "vpcId": {
      "Value": {
        "Ref": "vpc"
      }
    },
    "publicSubnet1": {
      "Value": {
        "Ref": "publicSubnet1"
      }
    },
    "publicSubnet2": {
      "Value": {
        "Ref": "publicSubnet2"
      }
    },
    "privateSubnet1": {
      "Value": {
        "Ref": "privateSubnet1"
      }
    },
    "privateSubnet2": {
      "Value": {
        "Ref": "privateSubnet2"
      }
    },
    "securityGroupPublic": {
      "Value": {
        "Ref": "securityGroupPublic"
      }
    },
    "securityGroupPrivate": {
      "Value": {
        "Ref": "securityGroupPrivate"
      }
    }
  }
}
